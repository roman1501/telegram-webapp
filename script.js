  
  const tg = window.Telegram.WebApp;
  
tg.ready();

// if (typeof tg.requestFullscreen === 'function') {
//   tg.requestFullscreen();
// } else {
//   console.warn('Fullscreen not supported, falling back to expand()');
//   tg.expand?.();
// }

// tg.onEvent('fullscreen_changed', event => {
//   console.log('Fullscreen state:', event.is_fullscreen);
// });

// tg.onEvent('fullscreen_failed', event => {
//   console.warn('Fullscreen failed:', event.error);
// });

  const supabaseUrl = 'https://mftgqxilushpzewpqkvi.supabase.co';
  const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1mdGdxeGlsdXNocHpld3Bxa3ZpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEzMDQxMzMsImV4cCI6MjA2Njg4MDEzM30.qRsUDDHSFuP6hIQZwv0mVsfS-ZZDPPbDU5Zl55Hoezw';

  let user = tg.initDataUnsafe?.user || { id: 123456789, first_name: "–¢–µ—Å—Ç" };
  const userId = user.id;
  const userName = user.first_name || "–ì—ñ—Å—Ç—å";
  document.getElementById("username").innerText = userName;

  const counterEl = document.getElementById("counter");
  const inventoryListEl = document.querySelector("#inventory-tab .bonus-list");

  const confirmModal = document.getElementById("confirmModal");

  const confirmBtn = document.getElementById("confirmActivate");
  const cancelBtn = document.getElementById("cancelActivate");
  let isHappyHour = false;

    const happyHourStart = 21; // 17:00
const happyHourEnd = 22;   // 18:00
  // üëá –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞

  const availableBonuses = [
    {
      name: "gyros",
      title: "-50% –Ω–∞ –≥—ñ—Ä–æ—Å",
      description: "–°–º–∞—á–Ω–∞ –∑–Ω–∏–∂–∫–∞ –Ω–∞ –≥—ñ—Ä–æ—Å —É Greek House",
      price: 1000,
      image: "gyros.jpeg",
      expiresAt: "2025-10-15"
    },
    {
      name: "bigPotato",
      title: "–í–µ–ª–∏–∫–∞ –∫–∞—Ä—Ç–æ–ø–ª—è –∑–∞ 40 –≥—Ä–Ω",
      description: "–û–±–º—ñ–Ω—è–π –∫–ª—ñ–∫–∏ –Ω–∞ —Ö—Ä—É—Å—Ç–∫—É –∫–∞—Ä—Ç–æ–ø–ª—é!",
      price: 700,
      image: "kartoplafrivelyka.jpeg",
      expiresAt: "2025-10-15"
    },
    {
      name: "pitaGrylZChederom",
      title: "-50% –Ω–∞ –ø—ñ—Ç—É –≥—Ä–∏–ª—å –∑ —á–µ–¥–µ—Ä–æ–º",
      description: "–°–∫—É—à—Ç—É–π —É–ª—é–±–ª–µ–Ω—É –ø—ñ—Ç—É –≤ 2 —Ä–∞–∑–∏ –¥–µ—à–µ–≤—à–µ!",
      price: 750,
      image: "pitagrylichederini.png",
      expiresAt: "2025-10-09"
    },
    {
      name: "gyrosPlusRB",
      title: "Red Bull –≤ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ –¥–æ –≥—ñ—Ä–æ—Å–∞",
      description: "–ë–µ—Ä–µ—à –≥—ñ—Ä–æ—Å? –ü—Ä–∏—Ö–æ–ø–∏ —ñ Red Bull –∑–∞ 0 –≥—Ä–Ω!",
      price: 950,
      image: "gyrosPlusRB.png",
      expiresAt: "2025-10-16"
    },
    {
      name: "kalmarPytaGyros",
      title: "-50% –Ω–∞ –ø—ñ—Ç—É –∞–±–æ –≥—ñ—Ä–æ—Å –∑ –∫–∞–ª—å–º–∞—Ä–æ–º",
      description: "240–≥—Ä–Ω - –∑–∞–¥–æ—Ä–æ–≥–æ? –¢–æ–¥—ñ —Ç—Ä–∏–º–∞–π —É–ª—é–±–ª–µ–Ω—É —Å—Ç—Ä–∞–≤—É –∑–∞ 120–≥—Ä–Ω!",
      price: 850,
      image: "kalmarPytaGyros.jpg",
      expiresAt: "2025-10-16"
    },
    {
      name: "pytaTynez",
      title: "–ù–æ–≤–∞ –ø—ñ—Ç–∞ –∑ —Ç—É–Ω—Ü–µ–º –∑–∞ –ø—ñ–≤ —Ü—ñ–Ω–∏",
      description: "-50% –Ω–∞ –Ω–æ–≤–∏–Ω–∫—É, –ø—ñ—Ç—É –∑ —Ç—É–Ω—Ü–µ–º!",
      price: 850,
      image: "pytaTynez.jpg",
      expiresAt: "2025-10-5"  
    },
      {
    name: "kalmarPyta",
    title: "-50% –Ω–∞ –ø—ñ—Ç—É –∑ –∫–∞–ª—å–º–∞—Ä–æ–º",
    description: "–ü—ñ—Ç–∞ –∑ –∫–∞–ª—å–º–∞—Ä–æ–º –∑–∞ –ø—ñ–≤ —Ü—ñ–Ω–∏!",
    price: 850,
    image: "kalmarPytaGyros.jpg",
    expiresAt: "2025-10-10"
  },
  {
    name: "kalmarGyros",
    title: "-50% –Ω–∞ –≥—ñ—Ä–æ—Å –∑ –∫–∞–ª—å–º–∞—Ä–æ–º",
    description: "–ì—ñ—Ä–æ—Å –∑ –∫–∞–ª—å–º–∞—Ä–æ–º –∑–∞ –ø—ñ–≤ —Ü—ñ–Ω–∏!",
    price: 850,
    image: "kalmarPytaGyros.jpg",
    expiresAt: "2025-10-10"
  },
  ];
  
function getDaysLeft(expireDate) {
  const now = new Date();
  const end = new Date(expireDate);
  const diff = Math.ceil((end - now) / (1000 * 60 * 60 * 24));
  return diff > 0 ? diff : 0;
}
function pluralDaysUa(n) {
  const a = Math.abs(n) % 100, b = a % 10;
  if (a > 10 && a < 20) return '–¥–Ω—ñ–≤';
  if (b > 1 && b < 5) return '–¥–Ω—ñ';
  if (b === 1) return '–¥–µ–Ω—å';
  return '–¥–Ω—ñ–≤';
}



  let clicks = 0;

const happyEl = document.getElementById("happyHourTimer");
// function showBlur() {
//   const blur = document.getElementById("blurOverlay");
//   blur.style.opacity = "1";
// }

// function hideBlur() {
//   const blur = document.getElementById("blurOverlay");
//   blur.style.opacity = "0";
// }


  
function updateHappyHourTimer() {
  const now = new Date();
  const currentHour = now.getHours();
  const currentMinutes = now.getMinutes();
  const currentSeconds = now.getSeconds();

  const tapImg = document.querySelector("#tapBtn img");
  const tapBtn = document.getElementById("tapBtn");
  tapBtn.classList.add("rotated");
  if (currentHour >= happyHourStart && currentHour < happyHourEnd) {
    const minutesLeft = 59 - currentMinutes;
    const secondsLeft = 59 - currentSeconds;
    happyEl.innerText = `üéâ Happy Hour! +2 –∫–ª—ñ–∫–∏! –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${minutesLeft} —Ö–≤ ${secondsLeft} —Å–µ–∫`;
    happyEl.style.display = "block";
    isHappyHour = true;

    // üü° –ó–æ–ª–æ—Ç–∞ –º–æ–Ω–µ—Ç–∫–∞ + –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞—Ö–∏–ª
    if (tapImg.src.includes("greenCoin.png")) {
      tapImg.src = "goldCoin.png";
    }
    tapBtn.classList.remove("rotated");

  } else {
    const nextHappy = new Date();
    nextHappy.setHours(happyHourStart, 0, 0, 0);
    if (now >= nextHappy) nextHappy.setDate(nextHappy.getDate() + 1);
    const diffMs = nextHappy - now;
  const totalSeconds = Math.floor(diffMs / 1000);
const hours = Math.floor(totalSeconds / 3600);
const minutes = Math.floor((totalSeconds % 3600) / 60);
const seconds = totalSeconds % 60;

if (hours > 0) {
  happyEl.innerText = `‚è≥ Happy Hour —á–µ—Ä–µ–∑: ${hours} –≥–æ–¥ ${minutes} —Ö–≤`;
} else if (minutes > 0) {
  happyEl.innerText = `‚è≥ Happy Hour —á–µ—Ä–µ–∑: ${minutes} —Ö–≤`;
} else {
  happyEl.innerText = `‚è≥ Happy Hour –≤–∂–µ –∑–æ–≤—Å—ñ–º —Å–∫–æ—Ä–æ!`;
}


    happyEl.style.display = "block";
    isHappyHour = false;

    // üü¢ –ó–µ–ª–µ–Ω–∞ –º–æ–Ω–µ—Ç–∫–∞ + –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞—Ö–∏–ª
    if (tapImg.src.includes("goldCoin.png")) {
      tapImg.src = "greenCoin.png";
    }
    tapBtn.classList.add("rotated");
  }
}

function animateCoinRain(count = 100, reward = 100) {
  const counter = document.getElementById("counter");
  const counterRect = counter.getBoundingClientRect();
  let added = 0;

  for (let i = 0; i < count && added < reward; i++) {
    setTimeout(() => {
      // 1. –ú–æ–Ω–µ—Ç–∫–∞ –∑‚Äô—è–≤–ª—è—î—Ç—å—Å—è
      const coin = document.createElement("div");
      coin.classList.add("coin-fly");

      const startX = window.innerWidth / 2 + (Math.random() * 80 - 40);
      const startY = window.innerHeight / 2 + (Math.random() * 80 - 40);
      coin.style.left = `${startX}px`;
      coin.style.top = `${startY}px`;

      const dx = counterRect.left + counterRect.width / 2 - startX;
      const dy = counterRect.top + counterRect.height / 2 - startY;
      coin.style.setProperty("--dx", `${dx}px`);
      coin.style.setProperty("--dy", `${dy}px`);

      document.body.appendChild(coin);

      // 2. –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ü–û 1
      clicks++;
      added++;
      updateDisplay();

      // 3. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ, –∫–æ–ª–∏ –≤—Å—ñ –¥–æ–¥–∞–ª–∏—Å—è
      if (added === reward) {
        saveUserData();
      }

      // 4. –ú–æ–Ω–µ—Ç–∫–∞ –∑–Ω–∏–∫–∞—î —á–µ—Ä–µ–∑ 900–º—Å (–∞–Ω—ñ–º–∫–∞)
      setTimeout(() => coin.remove(), 900);
    }, i * 15); // –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –º–æ–Ω–µ—Ç–∫–∞–º–∏ (–º–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —à–≤–∏–¥—à–µ —á–∏ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ)
  }
}




setInterval(updateHappyHourTimer, 1000);

updateHappyHourTimer(); // –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–¥—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ

const tapBtn = document.getElementById("tapBtn");

tapBtn.addEventListener("touchstart", () => {
  tapBtn.classList.add("active");
});
tapBtn.addEventListener("touchend", () => {
  tapBtn.classList.remove("active");
});
tapBtn.addEventListener("mousedown", () => {
  tapBtn.classList.add("active");
});
tapBtn.addEventListener("mouseup", () => {
  tapBtn.classList.remove("active");
});

async function checkDailyReward() {
  const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD

  const res = await fetch(`${supabaseUrl}/rest/v1/daily_rewards?user_id=eq.${userId}`, {
    headers: {
      apikey: supabaseKey,
      Authorization: `Bearer ${supabaseKey}`
    }
  });

  const data = await res.json();
  const lastRewardDate = data[0]?.last_claimed?.split('T')[0]; // –¢–µ–∂ –±–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –¥–∞—Ç—É
  
  if (false) {
      // showBlur();
    // –î–æ–¥–∞—Ç–∏ +100 –∫–ª—ñ–∫—ñ–≤
    updateDisplay();
    await saveUserData();

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–∞–ª–∫—É
    document.getElementById("dailyRewardModal").style.display = "flex";
    document.getElementById("dailyRewardBlur").classList.add("active");

    if (data.length === 0) {
      // –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å
      await fetch(`${supabaseUrl}/rest/v1/daily_rewards`, {
        method: "POST",
        headers: {
          apikey: supabaseKey,
          Authorization: `Bearer ${supabaseKey}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ user_id: userId, last_claimed: today })
      });
    } else {
      // –û–Ω–æ–≤–∏—Ç–∏ –∑–∞–ø–∏—Å
      await fetch(`${supabaseUrl}/rest/v1/daily_rewards?user_id=eq.${userId}`, {
        method: "PATCH",
        headers: {
          apikey: supabaseKey,
          Authorization: `Bearer ${supabaseKey}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ last_claimed: today })
      });
    }
       // setTimeout(() => hideBlur(), 300);
  }
}






function closeDailyRewardModal() {
  document.getElementById("dailyRewardBlur").classList.remove("active");
  document.getElementById("dailyRewardModal").style.display = "none";

   animateCoinRain(100);
}

  async function fetchUserData() {
    const res = await fetch(`${supabaseUrl}/rest/v1/clicks?user_id=eq.${userId}`, {
      headers: { apikey: supabaseKey, Authorization: `Bearer ${supabaseKey}` }
    });
    const data = await res.json();
    if (data.length > 0) clicks = data[0].clicks;
    else {
      await fetch(`${supabaseUrl}/rest/v1/clicks`, {
        method: "POST",
        headers: {
          apikey: supabaseKey,
          Authorization: `Bearer ${supabaseKey}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ user_id: userId, clicks: 0 })
      });
    }
    updateDisplay();
    await checkDailyReward();
  }

  function updateDisplay() {
    counterEl.innerText = `–ö–ª—ñ–∫—ñ–≤: ${clicks}`;
  }

  async function saveUserData() {
    await fetch(`${supabaseUrl}/rest/v1/clicks?user_id=eq.${userId}`, {
      method: "PATCH",
      headers: {
        apikey: supabaseKey,
        Authorization: `Bearer ${supabaseKey}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ clicks })
    });
  }

  function generateRandomCode() {
    const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let code = 'GH-';
    for (let i = 0; i < 5; i++) {
      code += charset[Math.floor(Math.random() * charset.length)];
    }
    return code;
  }

  async function loadInventory() {
    const res = await fetch(`${supabaseUrl}/rest/v1/bonuses?user_id=eq.${userId}`, {
      headers: { apikey: supabaseKey, Authorization: `Bearer ${supabaseKey}` }
    });
    const bonuses = await res.json();

    bonuses.sort((a, b) => a.used - b.used); // –ì–æ—Ç–æ–≤—ñ —Å–ø–æ—á–∞—Ç–∫—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ ‚Äî –∑–Ω–∏–∑—É

    inventoryListEl.innerHTML = "";

    for (const bonus of bonuses) {
      const bonusData = availableBonuses.find(b => b.name === bonus.name);
      if (!bonusData) continue;

      const card = document.createElement("div");
      card.className = "bonus-card";
      if (bonus.used) card.classList.add("used");

      card.innerHTML = `
        <img src="${bonusData.image}" alt="${bonusData.title}">
        <div class="bonus-title">${bonusData.title}</div>
        <div class="bonus-description">${bonusData.description}</div>
        <div class="bonus-price">–°—Ç–∞—Ç—É—Å: <strong>${bonus.used ? "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ" : "–ì–æ—Ç–æ–≤–∏–π –¥–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó"}</strong></div>
        ${!bonus.used ? '<button>–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏</button>' : ''}
      `;

      if (!bonus.used) {
        const btn = card.querySelector("button");
        btn.addEventListener("click", () => {
          confirmModal.classList.add("active");
confirmModal.style.display = "flex";


          const closeModal = () => {
            confirmModal.classList.remove("active");
confirmModal.style.display = "none";

            confirmBtn.onclick = null;
            cancelBtn.onclick = null;
          };

          cancelBtn.onclick = closeModal;

          confirmBtn.onclick = async () => {
            const code = generateRandomCode();

            const codeRes = await fetch(`${supabaseUrl}/rest/v1/discount_codes`, {
              method: "POST",
              headers: {
                apikey: supabaseKey,
                Authorization: `Bearer ${supabaseKey}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                user_id: userId,
                code,
                used: false,
                bonus_name: bonusData.title
              })
            });

            const updateRes = await fetch(`${supabaseUrl}/rest/v1/bonuses?id=eq.${bonus.id}`, {
              method: "PATCH",
              headers: {
                apikey: supabaseKey,
                Authorization: `Bearer ${supabaseKey}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({ used: true })
            });

            closeModal();

            if (codeRes.ok && updateRes.ok) {
              alert(`üéâ –í–∞—à –∫–æ–¥: ${code}`);
              loadInventory();
            } else {
              alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –±–æ–Ω—É—Å—É.");
            }
          };
        });
      }

      inventoryListEl.appendChild(card);
    }
  }

function showKalmarChoice(onPick) {
  const modal = document.getElementById('kalmarChoiceModal');
  const btnPita = document.getElementById('btnKalmarPita');
  const btnGyros = document.getElementById('btnKalmarGyros');
  const btnCancel = document.getElementById('btnKalmarCancel');

  const close = () => { modal.style.display = 'none';
    btnPita.onclick = btnGyros.onclick = btnCancel.onclick = null;
  };

  btnPita.onclick = () => { close(); onPick('pita'); };
  btnGyros.onclick = () => { close(); onPick('gyros'); };
  btnCancel.onclick = close;

  modal.style.display = 'flex';
}

async function purchaseBonus(bonusObj) {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É
  if (clicks < bonusObj.price) {
    alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–ª—ñ–∫—ñ–≤. –ü–æ—Ç—Ä—ñ–±–Ω–æ ${bonusObj.price}`);
    return;
  }

  // –°–ø–∏—Å—É—î–º–æ —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
  clicks -= bonusObj.price;
  updateDisplay();
  await saveUserData();

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–æ–Ω—É—Å —É —Ç–∞–±–ª–∏—Ü—é 'bonuses'
  const res = await fetch(`${supabaseUrl}/rest/v1/bonuses`, {
    method: "POST",
    headers: {
      apikey: supabaseKey,
      Authorization: `Bearer ${supabaseKey}`,
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      user_id: userId,
      name: bonusObj.name,   // –≤–∞–∂–ª–∏–≤–æ: –∑–±–µ—Ä–µ–∂–µ—Ç—å—Å—è kalmarPyta –∞–±–æ kalmarGyros
      price: bonusObj.price,
      used: false
    })
  });

  if (res.ok) {
    alert(`üéÅ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å: ${bonusObj.title}`);
    loadInventory();
  } else {
    alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –±–æ–Ω—É—Å—É.");
  }
}

function setupMarketButtons() {
  const marketCards = document.querySelectorAll("#market-tab .bonus-card");

  marketCards.forEach((card, index) => {
    if (card.dataset.rowWired === "1") return;
    card.dataset.rowWired = "1";

    const btn = card.querySelector("button");
    const priceEl = card.querySelector(".bonus-price");
    const descEl = card.querySelector(".bonus-description");
    const bonus = availableBonuses[index];

    // –Ø–∫—â–æ price –Ω–µ–º–∞—î ‚Äî –ø—ñ–¥—Å—Ç—Ä–∞—Ö—É—î–º–æ—Å—å
    if (!priceEl) {
      const fallbackPrice = document.createElement("div");
      fallbackPrice.className = "bonus-price";
      fallbackPrice.textContent = `${bonus?.price ?? '-'} –∫–ª—ñ–∫—ñ–≤`;
      card.insertBefore(fallbackPrice, btn);
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–π–¥–∂ (—è–∫—â–æ —î –¥–µ–¥–ª–∞–π–Ω)
    let labelEl = null;
    if (bonus?.expiresAt) {
      const daysLeft = getDaysLeft(bonus.expiresAt);
      labelEl = document.createElement("span");
      labelEl.className = "expiry-label" + (daysLeft > 0 ? "" : " expired");
      labelEl.innerHTML = daysLeft > 0
        ? `<span class="icon">‚è∞</span><span class="txt">${daysLeft} ${pluralDaysUa(daysLeft)}</span>`
        : `<span class="icon">‚õî</span><span class="txt">–ó–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å</span>`;
    }

    // –ù–û–í–ê —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
    // bonus-row: [ bonus-left | expiry-label ]
    // bonus-left: price (—Ä—è–¥–æ–∫ "** –∫–ª—ñ–∫—ñ–≤"), –Ω–∏–∂—á–µ ‚Äî –∫–Ω–æ–ø–∫–∞ "–û—Ç—Ä–∏–º–∞—Ç–∏"
    const row = document.createElement("div");
    row.className = "bonus-row";

    const leftCol = document.createElement("div");
    leftCol.className = "bonus-left";

    const priceNode = card.querySelector(".bonus-price"); // —ñ—Å–Ω—É—é—á–∏–π –≤—É–∑–æ–ª
    leftCol.appendChild(priceNode);
    leftCol.appendChild(btn);

    row.appendChild(leftCol);
    if (labelEl) row.appendChild(labelEl);

    // –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –æ–ø–∏—Å—É
    if (descEl && descEl.nextSibling) {
      card.insertBefore(row, descEl.nextSibling);
    } else {
      card.appendChild(row);
    }
// –Ø–∫—â–æ –±–æ–Ω—É—Å –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π ‚Äî –±–ª–æ–∫—É—î–º–æ
if (bonus?.expiresAt && getDaysLeft(bonus.expiresAt) <= 0) {
  btn.disabled = true;
  btn.classList.add("expired-btn");
}

    // –ö–ª—ñ–∫ "–û—Ç—Ä–∏–º–∞—Ç–∏"
    btn.addEventListener("click", async () => {
      if (bonus.name === 'kalmarPytaGyros') {
        showKalmarChoice(async (variant) => {
          const chosen = variant === 'pita'
            ? availableBonuses.find(b => b.name === 'kalmarPyta')
            : availableBonuses.find(b => b.name === 'kalmarGyros');

          if (!chosen) {
            alert('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –±–æ–Ω—É—Å—É.');
            return;
          }
          await purchaseBonus(chosen);
        });
        return;
      }
      await purchaseBonus(bonus);
    });
  });
}

setInterval(() => {
  document.querySelectorAll("#market-tab .bonus-card").forEach((card, index) => {
    const bonus = availableBonuses[index];
    if (!bonus?.expiresAt) return;

    const label = card.querySelector(".expiry-label");
    if (!label) return;

    const d = getDaysLeft(bonus.expiresAt);
    label.classList.toggle("expired", d <= 0);
    label.innerHTML = d > 0 ? `‚è∞ ${d} ${pluralDaysUa(d)}` : `‚õî –ó–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å`;
  });
}, 60 * 60 * 1000); // –æ–Ω–æ–≤–ª—é—î–º–æ —â–æ–≥–æ–¥–∏–Ω–∏




  
document.getElementById("tapBtn").addEventListener("click", (e) => {
Telegram.WebApp.HapticFeedback.impactOccurred('medium');


  const addAmount = isHappyHour ? 2 : 1;
  clicks += addAmount;
  updateDisplay();
  saveUserData();

  const plus = document.createElement("div");
  plus.className = "plus-one";
  plus.innerText = `+${addAmount}`;
  document.body.appendChild(plus);

  const rect = e.target.getBoundingClientRect();
  plus.style.left = rect.left + rect.width / 2 + "px";
  plus.style.top = rect.top + "px";

  setTimeout(() => {
    plus.remove();
  }, 800);
});


  function showTab(tabId, buttonEl) {
    document.querySelectorAll(".tab-content").forEach(tab => tab.classList.remove("active"));
    document.getElementById(tabId).classList.add("active");
    document.querySelectorAll(".tab-button").forEach(btn => btn.classList.remove("active"));
    buttonEl.classList.add("active");
    if (tabId === "inventory-tab") loadInventory();
  }
const fortuneBtn = document.getElementById("fortuneBtn");
const fortuneModal = document.getElementById("fortuneModal");
const closeFortuneModal = document.getElementById("closeFortuneModal");

// –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª–∫—É
fortuneBtn.addEventListener('click', () => {
  fortuneModal.style.display = 'flex';
  document.body.style.overflow = "hidden"; // –±–ª–æ–∫—É—î–º–æ –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Ñ–æ–Ω—É
});

// –ó–∞–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª–∫—É –∫–Ω–æ–ø–∫–æ—é
closeFortuneModal.addEventListener('click', () => {
  fortuneModal.style.display = 'none';
  document.body.style.overflow = ""; // –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ–∫—Ä—É—Ç–∫—É
});

// –ó–∞–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª–∫—É –∫–ª—ñ–∫–æ–º –ø–æ —Ñ–æ–Ω—É
fortuneModal.addEventListener('click', e => {
  if (e.target === fortuneModal) {
    fortuneModal.style.display = 'none';
    document.body.style.overflow = "";
  }
});
/* ===== Mini Caf√© logic ===== */
const mcIngredientsEl = document.getElementById('mcIngredients');
const mcPlateEl = document.getElementById('mcPlate');
const mcMsgEl = document.getElementById('mcMsg');
const mcOrderEl = document.getElementById('mcOrder');
const mcResetBtn = document.getElementById('mcReset');
const miniCafeEl = document.getElementById('miniCafe');

function scrollMiniCafeToBottom() {
  // —á–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ DOM –æ–Ω–æ–≤–∏—Ç—å—Å—è (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤—Å—Ç–∞–≤–∏–ª–æ—Å—å)
  requestAnimationFrame(() => {
    const target = miniCafeEl.scrollHeight - miniCafeEl.clientHeight;

    // –ø—Ä–æ–±—É—î–º–æ –Ω–∞—Ç–∏–≤–Ω–∏–π smooth
    try {
      miniCafeEl.scrollTo({ top: target, behavior: 'smooth' });
    } catch (e) {
      // fallback: –º‚Äô—è–∫–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è –≤—Ä—É—á–Ω—É
      const start = miniCafeEl.scrollTop;
      const dist = target - start;
      const dur = 350;
      let t0 = null;
      function step(ts) {
        if (!t0) t0 = ts;
        const p = Math.min((ts - t0) / dur, 1);
        const ease = 1 - Math.pow(1 - p, 3); // easeOutCubic
        miniCafeEl.scrollTop = start + dist * ease;
        if (p < 1) requestAnimationFrame(step);
      }
      requestAnimationFrame(step);
    }
  });
}
  function scrollMiniCafeToBottomSafe() {
  scrollMiniCafeToBottom();          // –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  setTimeout(scrollMiniCafeToBottom, 520); // –≤–¥—Ä—É–≥–µ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —á—ñ–ø–∞
}


/** –ù–∞–±—ñ—Ä ¬´—Ä–µ—Ü–µ–ø—Ç—ñ–≤¬ª ‚Äî –º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä—é–≤–∞—Ç–∏ */
const RECIPES = [
  {
    id: 'gyros',
    title: '–ì—ñ—Ä–æ—Å –∫–ª–∞—Å–∏—á–Ω–∏–π',
    rewardClicks: 50,
    steps: ['–ª–∞–≤–∞—à','–º º—è—Å–æ','–æ–≤–æ—á—ñ','—Å–æ—É—Å'],
  },
  {
    id: 'cheddarPita',
    title: '–ü—ñ—Ç–∞ –∑ —á–µ–¥–µ—Ä–æ–º',
    rewardClicks: 65,
    steps: ['–ø—ñ—Ç–∞','—Å–∏—Ä —á–µ–¥–µ—Ä','–æ–≤–æ—á—ñ','—Å–æ—É—Å'],
  }
];

/** –ü—É–ª —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º–∏ —ñ–∫–æ–Ω–∫–∞–º–∏ */
const ALL_ING = [
  { key:'–ª–∞–≤–∞—à', label:'–õ–∞–≤–∞—à', img:'lavash.png' },
  { key:'–º º—è—Å–æ', label:'–ú º—è—Å–æ', img:'meat.png' },
  { key:'–æ–≤–æ—á—ñ', label:'–û–≤–æ—á—ñ', img:'veggies.png' },
  { key:'—Å–æ—É—Å', label:'–°–æ—É—Å', img:'sauce.png' },
  { key:'–ø—ñ—Ç–∞', label:'–ü—ñ—Ç–∞', img:'pita.png' },
  { key:'—Å–∏—Ä —á–µ–¥–µ—Ä', label:'–ß–µ–¥–µ—Ä', img:'cheddar.png' },
];

let currentRecipe = null;
let progress = 0;

function pickRecipe() {
  // –æ–±–µ—Ä–µ–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ
  currentRecipe = RECIPES[Math.floor(Math.random()*RECIPES.length)];
  mcOrderEl.textContent = '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: ' + currentRecipe.title;
  progress = 0;
  mcMsgEl.innerHTML = '';
  renderIngredients();
  mcPlateEl.innerHTML = '';
  miniCafeEl.scrollTop = 0;
  renderRecipeHint();
mcRecipeHint.classList.remove('show');
mcHintToggle.textContent = '–ü—ñ–¥–≥–ª—è–Ω—É—Ç–∏ —Ä–µ—Ü–µ–ø—Ç';
}

function renderIngredients() {
  mcIngredientsEl.innerHTML = '';
  const poolKeys = new Set([...currentRecipe.steps]); // –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ + –ø–∞—Ä—É –∑–∞–π–≤–∏—Ö, —â–æ–± –±—É–ª–æ —Ü—ñ–∫–∞–≤—ñ—à–µ
  // –¥–æ–¥–∞–º–æ 2 –±—É–¥—å-—è–∫—ñ –∑–∞–π–≤—ñ
  while (poolKeys.size < currentRecipe.steps.length + 2) {
    const extra = ALL_ING[Math.floor(Math.random()*ALL_ING.length)].key;
    poolKeys.add(extra);
  }

  // –∑—ñ–±—Ä–∞—Ç–∏ –æ–± º—î–∫—Ç–∏ —ñ —Ç—Ä–æ—Ö–∏ –ø–µ—Ä–µ–º—ñ—à–∞—Ç–∏
  const items = Array.from(poolKeys).map(k => ALL_ING.find(i => i.key===k)).filter(Boolean);
  items.sort(()=>Math.random()-.5);

  for (const ing of items) {
    const btn = document.createElement('button');
    btn.className = 'ingredient';
    btn.dataset.key = ing.key;
    btn.innerHTML = `<img src="${ing.img}" alt="${ing.label}"><div>${ing.label}</div>`;
    btn.addEventListener('click', () => onIngredientClick(btn, ing));
    mcIngredientsEl.appendChild(btn);
  }
}
function lockNonRecipeIngredients() {
  const allowed = new Set(currentRecipe.steps);
  mcIngredientsEl.querySelectorAll('.ingredient').forEach(btn => {
    if (!allowed.has(btn.dataset.key)) {
      btn.classList.add('locked');
      btn.disabled = true; 
      btn.setAttribute('aria-disabled','true');
      btn.setAttribute('tabindex','-1');
    }
  });
}

function onIngredientClick(btn, ing) {
  // —è–∫—â–æ —Ä–µ—Ü–µ–ø—Ç —É–∂–µ –∑—ñ–±—Ä–∞–Ω–∏–π ‚Äì —ñ–≥–Ω–æ—Ä—É—î–º–æ –±—É–¥—å-—è–∫—ñ –∫–ª—ñ–∫–∏
  if (!currentRecipe || progress >= currentRecipe.steps.length) return;

  const needed = currentRecipe.steps[progress];
  if (ing.key === needed) {
    btn.classList.add('used');
    flyToPlate(btn, ing);
    progress++;
    mcMsgEl.innerHTML = `<div class="success-msg">–î–æ–±—Ä–µ! ${progress}/${currentRecipe.steps.length}</div>`;
    Telegram.WebApp.HapticFeedback.impactOccurred('light');

    if (progress === currentRecipe.steps.length) {
      onRecipeComplete();
    }
  } else {
    mcMsgEl.innerHTML = `<div class="err-msg">–ü–æ—Å–ø—ñ—à–∏–≤ üòÖ. –°–ø–æ—á–∞—Ç–∫—É: <b>${needed}</b></div>`;
    Telegram.WebApp.HapticFeedback.notificationOccurred('warning');
    mcRecipeHint.classList.add('show');
    mcHintToggle.textContent = '–°—Ö–æ–≤–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç';
    mcRecipeHint.scrollIntoView({ block:'nearest', behavior:'smooth' });
  }
}

async function onRecipeComplete() {
  const reward = currentRecipe.rewardClicks;
  clicks += reward;
  updateDisplay();
  await saveUserData();

  mcMsgEl.innerHTML = `<div class="success-msg">üéâ –ì–æ—Ç–æ–≤–æ! +${reward} –∫–ª—ñ–∫—ñ–≤ –∑–∞ ¬´${currentRecipe.title}¬ª</div>`;
  scrollMiniCafeToBottomSafe();
  Telegram.WebApp.HapticFeedback.notificationOccurred('success');

  // –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è ‚Äî –∑–∞–±–ª–æ–∫—É—î–º–æ –≤—Å–µ, —á–æ–≥–æ –Ω–µ –±—É–ª–æ –≤ —Ä–µ—Ü–µ–ø—Ç—ñ
  lockNonRecipeIngredients();
}


function flyToPlate(btn, ing) {
  const rect = btn.getBoundingClientRect();
  const plateRect = mcPlateEl.getBoundingClientRect();

  const ghost = document.createElement('img');
  ghost.src = ALL_ING.find(i=>i.key===ing.key)?.img || '';
  ghost.className = 'fly';
  ghost.style.left = rect.left + 'px';
  ghost.style.top  = rect.top + 'px';
  document.body.appendChild(ghost);

  requestAnimationFrame(() => {
    const dx = plateRect.left + plateRect.width/2 - rect.left - 24;
    const dy = plateRect.top + plateRect.height/2 - rect.top  - 24;
    ghost.style.transform = `translate(${dx}px, ${dy}px) scale(.6)`;
    ghost.style.opacity = '0.1';
  });

  setTimeout(() => {
    ghost.remove();
    const chip = document.createElement('img');
    chip.src = ALL_ING.find(i=>i.key===ing.key)?.img || '';
    chip.style.width = '36px';
    chip.style.height = '36px';
    chip.style.borderRadius = '8px';
    mcPlateEl.appendChild(chip);
  }, 460);
}

mcResetBtn.addEventListener('click', () => {
  pickRecipe();
});
const mcCloseBtn = document.getElementById('mcClose');
mcCloseBtn.addEventListener('click', () => {
  fortuneModal.style.display = 'none';
  document.body.style.overflow = "";
});
  
/** –ö–æ–ª–∏ –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è —Ç–≤–æ—è –º–æ–¥–∞–ª–∫–∞ ‚Äî —Å—Ç–∞—Ä—Ç—É—î–º–æ –≥—Ä—É */
fortuneBtn.addEventListener('click', () => {
  pickRecipe();
});
  const mcHintToggle = document.getElementById('mcHintToggle');
const mcRecipeHint = document.getElementById('mcRecipeHint');

function renderRecipeHint(){
  const parts = currentRecipe.steps.map(step=>{
    const ing = ALL_ING.find(i=>i.key===step);
    return `<span class="step-chip">${ing?.img ? `<img src="${ing.img}" alt="">` : ''}<span>${ing?.label || step}</span></span>`;
  });
  mcRecipeHint.innerHTML = parts.join('<span class="step-arrow">‚Üí</span>');
}

mcHintToggle.addEventListener('click', ()=>{
  const show = !mcRecipeHint.classList.contains('show');
  mcRecipeHint.classList.toggle('show', show);
  mcHintToggle.textContent = show ? '–°—Ö–æ–≤–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç' : '–ü—ñ–¥–≥–ª—è–Ω—É—Ç–∏ —Ä–µ—Ü–µ–ø—Ç';
  if (show) mcRecipeHint.scrollIntoView({ block:'nearest', behavior:'smooth' });
});


fetchUserData().then(async () => {
  setupMarketButtons();
  loadInventory();
});